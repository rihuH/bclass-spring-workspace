<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml
					/WEB-INF/spring/spring-security.xml
		</param-value>
	</context-param>
	<!-- Root Spring Container를 만들 때 param-value에 있는 파일을 읽는다 읽으면서 -->
	
	<!-- 이 부분에서 빈 등록을 해주고 -->
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!--  여기부터가 핵심적인 부분인데
		서버를 실행하면, 위에까지 root webApplicationContext를 만들고
		아래로 읽으면서 내려감
		아래에 태그도 servlet임
		appServlet이라는 이름
		이 객체를 자바에서 DispatcherServlet이라는 객체르 ㄹ생성하면서 올림
 		***********스프링에서 가장 중요한 객체
 		frontServlet, frontController라고도 부름.
 		
 		서버의 시작은 클라이언트리퀘스트. 그 요청을 톰캣이 처음 받아서
 		톰캣 애플리케이션 안에 수많은 컨테이너들(빈 관리, 로그 관리 컨테이너 등등 )중 사용자 요청처리를 해줄
 		요청은 서블릿이 받는데
 		스프링은 모든 요청을 DispatcherServlet이 맨 처음에 받음
 		
 		<load-on-startUp>이 우선순위인데, 이게 1임
 		<servlet-mapping>은 어떤 요청이 왔을 때 받을 것인지인데, url-pattern에 / 가 있음. /로 시작하는
 		모든 요청을 받는다는 의미이다.
 		
 		
 		스프링은 login.me insert.me..... 모든 요청이 제일 먼저 DispatcherServlet에게 가야한다.
 		이걸 받아서 memberController에 그걸 관리하는 메소드쪽에 전달해야함
 		핸들러매핑이라고 한다.
 		그러려면 컨트롤러를 알아야하고 컨트롤러가 생성되어있어야하는데 우리가 직접 만들 수가 없다 언제 올지 모르니까
 		그래서 이걸 스프링이 관리하도록 해야하고 빈으로 등록을 해놔야함
 		=>root-content로
 			 -->
 			 
 			 
 			 
	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	
	<!-- 
		* 필터!
		
		모든 요청 처리 전 공통적으로 필요한 기능들을 
		클라이언트의 요청을 Servlet이 받기 전 먼저 필터링해서 수행할 수 있도록 해줌
		배포서술자(web.xml)에 작성해서 해당 작성내용이 먼저 수행될 수 있도록 해줌)
		
		이 파일이 제일 먼저 수행되므로
		
		* 스프링에서 제공해주는 인코딩 필터
		- org.springframeword.web.filter.CharacterEncodingFiler.class
		여기에 등록을 해줌
		- 필터 등록 시 filter태그 + filter-mapping태그를 함께 써주어야함!
	 -->

	<!-- filter-name은 빈등록할 때 id속성과 같다
		filter-class에는 캐릭터인코딩필터 클래스의 풀클래스명을 적어준다
		init-param 초기화시 인자값
		param-name에 필드명/ param-value에 담고싶은 값
		다시 init한다음에 param-name에 forceEncoding 겹치면 무조건 내가 대입한 것 param-value에 true
	
		 -->	 
	<filter>
	    <filter-name>encodingFilter</filter-name>
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	    <init-param>
	        <param-name>encoding</param-name>
	        <param-value>UTF-8</param-value>
	    </init-param>
	    <init-param>
	        <param-name>forceEncoding</param-name>
	        <param-value>true</param-value>
	    </init-param>
	</filter>
	 
	 <!-- encodingFilter를 모든 패턴에 적용,, pattern을 /*이라고 적으면 모든 url패턴에 적용하겠다는 의미
	 그리고 여기에 오타나면 첫 메인페이지 404뜸 -->
	<filter-mapping>
	    <filter-name>encodingFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>

</web-app>
